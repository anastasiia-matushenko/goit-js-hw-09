{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SAC9BC,EAAYF,SAASC,cAAc,uBAoCzC,SAASE,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACTV,EAAUW,UAAW,EAEnBP,EACFI,EAAQ,C,SAAEN,E,MAAUC,IAEpBM,EAAO,C,SAAEP,E,MAAUC,MAEpBA,MA9CLN,EAAKe,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAIC,iBACJd,EAAUW,UAAW,EAErBI,QAAQC,IAAIH,EAAII,cAAcC,UAC9B,MAAMC,OAAEA,EAAMhB,MAAEA,EAAKiB,KAAEA,GAASP,EAAII,cAAcC,UAYpD,UAAsBG,SAAEA,EAAQC,QAAEA,EAAOC,UAAEA,IAEzC,IAAK,IAAIC,EAAW,EAAGA,GAAYD,EAAWC,GAAY,EAAG,CAG3DvB,EAAcuB,EAFCH,EAAWC,EAAUE,GAGjCC,MAAK,EAACvB,SAAEA,EAAQC,MAAEA,MACjBuB,EAAA/B,GAASgC,OAAOC,QAAQ,qBAAqB1B,QAAeC,UAE7D0B,OAAM,EAAC3B,SAAEA,EAAQC,MAAEA,MAClBuB,EAAA/B,GAASgC,OAAOG,QAAQ,oBAAoB5B,QAAeC,YAfjE4B,CALiB,CACfV,UAAWlB,EAAM6B,MACjBV,SAAUF,EAAKY,MACfT,WAAYJ,EAAOa,QAIrBnB,EAAII,cAAcgB","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector(\".form\");\nconst submitBtn = document.querySelector(\"button[type=submit]\");\n\nform.addEventListener(\"submit\", onFormSubmit);\n\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n  submitBtn.disabled = true;\n\n  console.log(evt.currentTarget.elements);\n  const { amount, delay, step } = evt.currentTarget.elements;\n\n  const fieldVal = {\n    delayVal: +delay.value,\n    stepVal: +step.value,\n    amountVal: +amount.value,\n  }\n  updateValues(fieldVal);\n\n  evt.currentTarget.reset();\n};\n\nfunction updateValues({ delayVal, stepVal, amountVal }) {\n  // let newDelay;\n  for (let position = 1; position <= amountVal; position += 1) {\n    let newDelay = delayVal + stepVal * position;\n\n    createPromise(position, newDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n};\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      submitBtn.disabled = false;\n\n    if (shouldResolve) {\n      resolve({ position, delay });\n    } else {\n      reject({ position, delay });\n    }\n  }, delay);\n  })\n};\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$submitBtn","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","disabled","addEventListener","evt","preventDefault","console","log","currentTarget","elements","amount","step","delayVal","stepVal","amountVal","position1","then","$parcel$interopDefault","Notify","success","catch","failure","$47d4ff9957288465$var$updateValues","value","reset"],"version":3,"file":"03-promises.7930bb6b.js.map"}
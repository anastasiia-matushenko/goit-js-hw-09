{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SA4CA,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACPN,EACFI,EAAQ,C,SAAEN,E,MAAUC,IAEpBM,EAAO,C,SAAEP,E,MAAUC,MAEpBA,MApDQQ,SAASC,cAAc,SAE/BC,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAIC,iBAEJ,MAAMC,OAAEA,EAAMC,KAAEA,EAAId,MAAEA,GAAUW,EAAII,cAAcC,SAElD,GAAIhB,EAAMiB,MAAQ,GAAKH,EAAKG,MAAQ,EAClC,OAAOC,EAAAtB,GAASuB,OAAOC,QAAQ,2BAGjC,GAAIP,EAAOI,OAAS,EAClB,OAAOC,EAAAtB,GAASuB,OAAOC,QAAQ,oCAGjC,SAAUC,GAAOV,EAAII,cAAcC,SAE7BM,EAAY,GAClBD,EAAIE,QAAQC,GAAmB,SAAbA,EAAEC,UAAoBC,SAASF,IAC9CF,EAAUE,EAAEG,MAAQC,OAAOJ,EAAEP,UAQlC,UAAsBJ,OAAEA,EAAQb,MAAA6B,EAAKf,KAAEA,IACrC,IAAK,IAAIgB,EAAI,EAAGA,GAAKjB,EAAQiB,GAAK,EAAG,CAEnChC,EAAcgC,EADCD,EAAQf,GAAQgB,EAAI,IAEhCC,MAAK,EAAChC,SAAEA,EAAQC,MAAEA,MACjBkB,EAAAtB,GAASuB,OAAOa,QAAQ,qBAAqBjC,QAAeC,UAE7DiC,OAAM,EAAClC,SAAEA,EAAQC,MAAEA,MAClBkB,EAAAtB,GAASuB,OAAOC,QAAQ,oBAAoBrB,QAAeC,WAbjEkC,CAAaZ,GAEbX,EAAII,cAAcoB","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector(\".form\");\n\nform.addEventListener(\"submit\", onFormSubmit);\n\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n\n  const { amount, step, delay } = evt.currentTarget.elements;\n   \n  if (delay.value < 0 || step.value < 0) {\n    return Notiflix.Notify.failure(\"Insert a positive value\");\n  }\n\n  if (amount.value <= 0) {\n    return Notiflix.Notify.failure(\"Insert an amount greater than 0!\");\n  }\n\n  const [...arr] = evt.currentTarget.elements;\n\n  const fieldsVal = {}; \n  arr.filter((q) => q.tagName == \"INPUT\").forEach((q) => { \n     fieldsVal[q.name] = Number(q.value); \n  }); \n\n  updateValues(fieldsVal); \n \n  evt.currentTarget.reset(); \n}; \n \nfunction updateValues({ amount, delay, step }) { \n  for (let i = 1; i <= amount; i += 1) { \n    let newDelay = delay + step * (i - 1); \n    createPromise(i, newDelay) \n      .then(({ position, delay }) => { \n        Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`); \n      }) \n      .catch(({ position, delay }) => { \n        Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`); \n      }) \n  } \n};\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n    if (shouldResolve) {\n      resolve({ position, delay });\n    } else {\n      reject({ position, delay });\n    }\n  }, delay);\n  })\n};\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","evt","preventDefault","amount","step","currentTarget","elements","value","$parcel$interopDefault","Notify","failure","arr","fieldsVal","filter","q","tagName","forEach","name","Number","delay1","i","then","success","catch","$47d4ff9957288465$var$updateValues","reset"],"version":3,"file":"03-promises.291a537e.js.map"}